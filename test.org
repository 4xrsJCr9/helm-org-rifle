* Code

These come in handy while coding.

** Profiling

Why aren't macros like these in some default package?  Sure beats having to type ~(mapcar (lambda (it) (...it...)) list)~ over and over.

#+BEGIN_SRC elisp
  (defmacro it (&rest body)
    `(lambda (it)
       ,@body))
  (defmacro mapit (seq &rest body)
    `(mapcar (lambda (it)
               ,@body)
             ,seq))
#+END_SRC

This makes it easy to profile code:

#+BEGIN_SRC elisp
  (defmacro profile-rifle (times &key label &rest body)
    `(let (output)
       (dolist (p '("helm-" "org-" "string-" "s-" "buffer-" "append" "delq" "map" "list" "car" "save-" "outline-" "delete-dups" "sort" "line-" "nth" "concat" "char-to-string" "rx-" "goto-" "when" "search-" "cl-"))
         (elp-instrument-package p))
       (dotimes (x ,times)
         ,@body)
       (elp-results)
       (elp-restore-all)
       (point-min)
       (forward-line 20)
       (delete-region (point) (point-max))
       (setq output (concat ,label "\n" (buffer-substring-no-properties (point-min) (point-max))))
       (kill-buffer)
       (delete-window)
       output))
#+END_SRC

#+RESULTS:
: profile-rifle

#+BEGIN_SRC elisp
  (defmacro profile-old-and-new (times &rest body)
    `(mapcar (lambda (file)
               (eval-buffer (find-file-noselect file))
               (profile-rifle ,times :label file ,@body))
             '("~/src/helm-org-rifle/old-gen.el" "~/src/helm-org-rifle/helm-org-rifle.el")))
#+END_SRC

#+RESULTS:
: profile-old-and-new

** Open Helm session on current org buffers

#+BEGIN_SRC elisp
(let ((helm-candidate-separator " "))
  (helm :sources (helm-org-rifle-get-sources)))

(let ((helm-candidate-separator " ")
      (helm-org-rifle-show-path t))
  (helm :sources (helm-org-rifle-get-sources)))
#+END_SRC

*** Without fontification

#+BEGIN_SRC elisp
(let ((helm-candidate-separator " ")
      (helm-org-rifle-fontify-headings nil))
  (helm :sources (helm-org-rifle-get-sources)))

(let ((helm-candidate-separator " ")
      (helm-org-rifle-show-path t)
      (helm-org-rifle-fontify-headings nil))
  (helm :sources (helm-org-rifle-get-sources)))
#+END_SRC

** Get list of candidates for "test.org" buffer

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "pomegr blueberry")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "green")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "green blue")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "pomegr")

(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "helm food")

(let ((helm-candidate-separator " ")
      (helm-org-rifle-show-path t))
  (helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "green blue"))
#+END_SRC

*** Other buffers

#+BEGIN_SRC elisp
(let ((helm-org-rifle-fontify-headings nil))
  (helm-org-rifle-get-candidates-in-buffer (get-buffer "reference.org") "emacs"))

(helm-org-rifle-get-candidates-in-buffer (get-buffer "reference.org") "emacs")
(helm-org-rifle-get-candidates-in-buffer (get-buffer "main.org") "emacs")

(helm-org-rifle-get-candidates-in-buffer (get-buffer "main.org") "tires")

#+END_SRC

** Context-splitting

Prototype code, keeping for future reference.

#+BEGIN_SRC elisp
(let* ((num-context-words 2)
       (needle "needle")
       (haystack "one two three needle four five six")
       (hay (s-split needle haystack))
       (left-hay (s-split-words (car hay)))
       (right-hay (s-split-words (nth 1 hay))))
  (concat "..."
          (s-join " " (subseq left-hay (- num-context-words)))
          " " needle " "
          (s-join " " (subseq right-hay 0 num-context-words))
          "..."))

;; Multiple needles
(let* ( (needles '("needle" "pin"))
        (haystack "one two three \" needle not pin four five six seven eight pin nine ten eleven twelve"))
  (cl-loop for needle in needles
           append (cl-loop for re = (rx-to-string `(and (repeat 1 ,helm-org-rifle-context-words (and (1+ (not space))
                                                                                                     (or (1+ space)
                                                                                                         word-boundary)))
                                                        (group (eval needle))
                                                        (repeat 1 ,helm-org-rifle-context-words (and (or word-boundary
                                                                                                         (1+ space))
                                                                                                     (1+ (not space))))))
                           for m = (string-match re haystack end)
                           for end = (match-end 1)
                           while m
                           collect (concat "..." (match-string-no-properties 0 haystack) "..."))))
#+END_SRC

*** Slow code that splits on word boundaries

This code splits on word boundaries, but it's very slow.  Profiling it
showed the vast majority of the time was in =string-match=.  I'm
guessing the regexp is too complicated or unoptimized.

#+BEGIN_SRC elisp
  ;; Reduce matching lines to matched word with context
  (setq matched-words-with-context
        (cl-loop for line in (map 'list 'car matching-lines-in-node)
                 append (cl-loop for token in input
                                 for re = (rx-to-string
                                           `(and (repeat 0 ,helm-org-rifle-context-words
                                                         (and (1+ (not space))
                                                              (or (1+ space)
                                                                  word-boundary)))
                                                 (group (eval token))
                                                 (repeat 0 ,helm-org-rifle-context-words
                                                         (and (or word-boundary
                                                                  (1+ space))
                                                              (1+ (not space))))))
  
                                 ;;  This one line uses about 95% of the runtime of this function
                                 for m = (string-match re line end)
  
                                 for end = (match-end 1)
                                 when m
                                 collect (match-string-no-properties 0 line))))
#+END_SRC

*** Faster version that cuts off mid-word

This version is much, much faster, but instead of matching on word
boundaries, it just matches so-many characters before and after the
token.  It's not quite as nice, but the speedup is worth it, and it
seems good enough.

This is the version currently in-use.

#+BEGIN_SRC elisp
(setq matched-words-with-context
                    (cl-loop for line in (map 'list 'car matching-lines-in-node)
                             append (cl-loop for token in input
                                             for re = (rx-to-string '(and (repeat 0 25 not-newline)
                                                                          (eval token)
                                                                          (repeat 0 25 not-newline)))
                                             for m = (string-match re line end)

                                             for end = (match-end 1)
                                             when m
                                             collect (match-string-no-properties 0 line))))
#+END_SRC

** Org headings

#+BEGIN_SRC elisp
  ;; Build string for fontifying
  (components (org-heading-components))
  (level (nth 0 components))
  (plain-heading (s-join " " (list
                              (s-pad-left level  "*" "")
                              (nth 4 components))))
  ;; Note: org-fontify-like-in-org-mode uses temporary buffers that load
  ;; org-mode and therefore org-mode-hook.  This could be a performance
  ;; issue.
  (fontified-heading (org-fontify-like-in-org-mode plain-heading))
#+END_SRC

** MAYBE elp profiling

#+BEGIN_SRC elisp
(setq helm-org-rifle-show-path nil)
(setq helm-org-rifle-show-path t)
#+END_SRC

*** Testing with helm: before negation support                  :read_only:
#+BEGIN_SRC elisp
(setq argh-how-many-buffers 0)
(message "This many buffers: %s" argh-how-many-buffers)
(setq argh-how-many-times-getc-called 0)
(message "This many times: %s" argh-how-many-times-getc-called)
#+END_SRC

#+BEGIN_SRC elisp :results value
  (progn
    (dolist (p '("helm-" "org-" "string-" "s-"))
      (elp-instrument-package p))
    (let ((helm-pattern "emacs helm"))
      (helm-org-rifle))
    (elp-results)
    (elp-restore-all)
    (buffer-substring-no-properties (point-min) (point-max)))
#+END_SRC

#+RESULTS:
#+begin_example
helm-org-rifle                                                1           21.149816496  21.149816496
helm-internal                                                 1           21.146028492  21.146028492
helm-display-buffer                                           1           0.015992741   0.015992741
helm-default-display-buffer                                   1           0.015959396   0.015959396
helm-split-window-default-fn                                  2           0.015504805   0.0077524025
helm-window-in-direction                                      2           0.015404318   0.007702159
helm-cleanup                                                  1           0.005956688   0.005956688
helm-frame-or-window-configuration                            2           0.00564105    0.002820525
helm-org-rifle-get-sources                                    1           0.003752977   0.003752977
string-match                                                  3553        0.0031005809  8.726...e-07
helm-make-source                                              3           0.001922106   0.000640702
org-buffer-list                                               1           0.001704984   0.001704984
helm--setup-source                                            3           0.0013488509  0.000449617
helm-source--header-line                                      3           0.0011306280  0.0003768760
helm-initialize                                               1           0.000588538   0.000588538
helm-initial-setup                                            1           0.000510501   0.000510501
helm--create-source                                           3           0.000273995   9.133...e-05
helm-source-sync                                              3           0.000238082   7.936...e-05
helm-log-run-hook                                             12          0.0002350079  1.958...e-05
helm--run-init-hooks                                          2           0.000163177   8.15885e-05
helm-get-sources                                              5           0.000135961   2.71922e-05
helm-create-helm-buffer                                       1           0.000131969   0.000131969
helm-funcall-foreach                                          2           0.000125873   6.29365e-05
helm-compile-sources                                          1           8.7179e-05    8.7179e-05
helm-buffer-get                                               5           5.823e-05     1.1646e-05
helm-handle-winner-boring-buffers                             1           5.4042e-05    5.4042e-05
helm-action-window                                            10          5.110...e-05  5.1105e-06
helm-clean-up-minibuffer                                      1           5.0868e-05    5.0868e-05
helm--remap-mouse-mode                                        2           4.403e-05     2.2015e-05
helm-ff-save-history                                          1           4.3852e-05    4.3852e-05
helm-org-rifle-buffer-invisible-p                             5           4.0771e-05    8.1542e-06
helm-file-completion-source-p                                 1           3.9612e-05    3.9612e-05
helm-source-mm-get-search-or-match-fns                        3           3.739e-05     1.246...e-05
helm-get-current-source                                       1           3.4542e-05    3.4542e-05
helm-update-source-p                                          3           2.9221e-05    9.740...e-06
helm-prevent-switching-other-window                           2           2.8107e-05    1.40535e-05
s-starts-with?                                                5           2.5263e-05    5.0526e-06
helm-log                                                      61          2.303...e-05  3.776...e-07
helm--current-buffer                                          1           2.0959e-05    2.0959e-05
helm-clear-visible-mark                                       1           2.0575e-05    2.0575e-05
helm-window                                                   1           1.5778e-05    1.5778e-05
helm-compile-source--info-index                               3           1.536...e-05  5.121...e-06
helm-parse-keys                                               1           1.4924e-05    1.4924e-05
helm-restore-position-on-quit                                 1           1.3328e-05    1.3328e-05
helm-current-position                                         2           1.279...e-05  6.397...e-06
helm-attrset                                                  3           1.2792e-05    4.264e-06
helm-initialize-overlays                                      1           1.0226e-05    1.0226e-05
helm-setup-user-source                                        3           1.019...e-05  3.397...e-06
helm-match-line-cleanup                                       1           9.55e-06      9.55e-06
helm-alive-p                                                  1           6.474e-06     6.474e-06
helm-compile-source--type                                     3           5.868...e-06  1.956...e-06
helm-compile-source--candidates-file                          3           5.813e-06     1.937...e-06
helm-match-functions                                          3           5.695...e-06  1.898...e-06
helm-search-functions                                         3           5.488...e-06  1.829...e-06
helm-delayed-source-p                                         3           4.737...e-06  1.579...e-06
helm-make-actions                                             3           3.953e-06     1.317...e-06
string-prefix-p                                               5           3.477...e-06  6.954e-07
string-width                                                  5           2.828...e-06  5.657...e-07
helm-kill-async-processes                                     2           2.012e-06     1.006e-06
helm-interpret-value                                          3           1.797e-06     5.99e-07
helm-compile-source--candidates-in-buffer                     3           1.788e-06     5.96e-07
helm-mklist                                                   3           1.764...e-06  5.88e-07
helm-compile-source--dummy                                    3           1.683e-06     5.61e-07
helm-resume-p                                                 3           1.42e-06      4.733...e-07
helm-recent-push                                              1           1.399e-06     1.399e-06
helm-get-attribute-from-source-type                           3           1.371e-06     4.570...e-07
helm-set-local-variable                                       1           1.261e-06     1.261e-06
helm-normalize-sources                                        2           1.235e-06     6.175e-07
helm-initialize-persistent-action                             1           1.192e-06     1.192e-06
helm-reset-yank-point                                         2           1.177e-06     5.885e-07
helm-get-previous-header-pos                                  1           9.7e-07       9.7e-07
helm-log-save-maybe                                           1           9.02e-07      9.02e-07
helm-find-files--reset-level-tree                             1           7.84e-07      7.84e-07
helm-get-next-header-pos                                      1           7e-07         7e-07
string-equal                                                  1           2.75e-07      2.75e-07
helm-read-pattern-maybe                                       1           0             0.0
helm-other-buffer                                             1           0             0.0
helm-update                                                   1           0             0.0
helm-keyboard-quit                                            1           0             0.0
#+end_example

**** Results

***** DONE helm-org-rifle-get-sources 

This function is working correctly, returning the number of sources that it should.

***** DONE helm-org-rifle-get-candidates-in-buffer

This function works correctly and pretty quickly.

***** TODO helm-org-rifle-get-candidates-in-buffer called 10 times for each buffer

However, Helm seems to be calling this function, the =:candidates= function...sometimes 10 times per buffer, sometimes less, like this time where it did it 6 times for each buffer (input was "emacs"):

#+BEGIN_EXAMPLE txt
Evaluate this elisp code block on your system? (y or n) y
executing Elisp code block...
This many sources: 18
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
Code block evaluation complete.
#+END_EXAMPLE

Okay, I think I see what it's doing: Helm is calling the candidates function once for every character that is typed, plus one more time.  When I type =emacs= it calls it 6 times per buffer, and when I type =e= it calls it twice per buffer.  The =:delay= works in that it doesn't start getting candidates until that much time has elapsed after I've finished typing, but then it goes ahead and calls it for every character I typed, plus one.

Problem might be in =helm-update= or =helm-process-delayed-sources=...

*** Testing without helm
#+BEGIN_SRC elisp :results value
    (progn
      (let ((buffers (remove-if 'helm-org-rifle-buffer-invisible-p (org-buffer-list nil t)))
            (string "emacs helm";; (read-from-minibuffer "Words: ")
                    ))
        (dolist (p '("helm-" "org-" "string-" "s-"))
          (elp-instrument-package p))
        (dolist (buffer buffers)
          (helm-org-rifle-get-candidates-in-buffer buffer string)))
      (elp-results)
      (elp-restore-all)
  (buffer-substring-no-properties (point-min) (point-max)))
#+END_SRC

#+RESULTS:
#+begin_example txt
helm-org-rifle-get-candidates-in-buffer                       18          0.325021298   0.0180567387
string-match                                                  1347        0.0362915149  2.694...e-05
org-heading-components                                        376         0.0335699080  8.928...e-05
org-back-to-heading                                           412         0.018007849   4.370...e-05
s-contains?                                                   1114        0.0121319489  1.089...e-05
helm-org-rifle-fontify-like-in-org-mode                       18          0.01178797    0.0006548872
org-indent-refresh-maybe                                      36          0.0028632780  7.953...e-05
org-at-heading-p                                              706         0.0020766779  2.941...e-06
org-indent-add-properties                                     36          0.0017027310  4.729...e-05
org-get-limited-outline-regexp                                72          0.0010015760  1.391...e-05
org-activate-plain-links                                      23          0.0004599949  1.999...e-05
s--truthy?                                                    1114        0.0003860220  3.465...e-07
org-indent-notify-modified-headline                           36          0.0003555730  9.877...e-06
org-activate-bracket-links                                    18          0.0003234190  1.796...e-05
org-do-latex-and-related                                      18          0.000282822   1.571...e-05
org-activate-footnote-links                                   18          0.0002406200  1.336...e-05
org-reduced-level                                             376         0.0002319499  6.168...e-07
org-fontify-meta-lines-and-blocks                             18          0.0002315430  1.286...e-05
org-string-nw-p                                               18          0.000225051   1.250...e-05
org-unfontify-region                                          18          0.000187095   1.039...e-05
org-footnote-next-reference-or-definition                     18          0.0001767840  9.821...e-06
s-join                                                        54          0.0001765719  3.269...e-06
org-in-src-block-p                                            10          0.0001672479  1.672...e-05
org-activate-tags                                             18          0.000155625   8.645...e-06
org-fontify-meta-lines-and-blocks-1                           18          0.0001549140  8.606...e-06
org-string-match-p                                            18          0.0001511729  8.398...e-06
org-do-emphasis-faces                                         18          0.000141394   7.855...e-06
org-activate-dates                                            18          0.000104557   5.808...e-06
s-pad-left                                                    18          0.0001032720  5.737...e-06
org-activate-angle-links                                      18          9.853...e-05  5.474...e-06
string-match-p                                                18          9.2952e-05    5.164e-06
org-bullets-level-char                                        18          8.3399e-05    4.633...e-06
org-activate-code                                             18          5.2719e-05    2.928...e-06
org-get-level-face                                            54          5.143...e-05  9.524...e-07
org-link-unescape                                             5           5.1e-05       1.02e-05
org-remove-flyspell-overlays-in                               10          4.6203e-05    4.6203e-06
org-font-lock-add-priority-faces                              18          3.870...e-05  2.150...e-06
org-remove-font-lock-display-properties                       18          3.099...e-05  1.721...e-06
org-hide-wide-columns                                         18          2.987e-05     1.659...e-06
org-before-change-function                                    36          2.4329e-05    6.758...e-07
string-to-char                                                36          1.481...e-05  4.114...e-07
org-font-lock-hook                                            18          1.462...e-05  8.127...e-07
org-activate-target-links                                     18          1.361...e-05  7.564...e-07
org-fontify-entities                                          18          1.223...e-05  6.799...e-07
org-font-lock-add-tag-faces                                   18          9.402...e-06  5.223...e-07
org-raise-scripts                                             18          7.807e-06     4.337...e-07
#+end_example

** DONE buffer-name-matching

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "test.org emacs")
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "test.org") "inbox.org emacs")
#+END_SRC

** DONE Matching symbol parts

#+BEGIN_SRC elisp
;; This should return the "Target heading" heading too
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "test.org") "face")

(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "face helm")
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "testtemp.org") "face helm")
#+END_SRC

This does not work:

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match (concat "\\_<" token "\\_>") target))
#+END_SRC

#+RESULTS:

Which is strange, because =\\_<= is supposed to be the symbol-boundary character...

This works but isn't what we want:

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match token target))
#+END_SRC

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match (concat "\\b" token "\\b") target))
#+END_SRC

This may do it:

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match (concat "\\W" token "\\W") target))
#+END_SRC

It matches =face= okay, but not =helm= because of the quote.

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "helm"))
    (string-match (concat "\\(\\W\\|\\_<\\)" token "\\(\\W\\|\\_>\\)") target))
#+END_SRC

Wow, that "'helm-selection" really doesn't want to be matched...

This might do it...

#+BEGIN_SRC elisp
(string-match "\\(\\B\\|\\W\\)face" "(face-remap-set-base 'helm-selection")
#+END_SRC

Seems to work... now for the real test...

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "selection"))
    (string-match (concat "\\(\\B\\|\\W\\)" token "\\(\\W\\|\\B\\)") target))
#+END_SRC

I think it works!  Let's try it for real...

Buuuuut it doesn't match "selection".  Wow.

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (tokens '("face" "helm" "blah" "selection" "base")))
    (cl-loop for token in tokens
             when (string-match (concat "\\(\\B\\|\\W\\|\\_<\\|[[:punct:]]\\)" token "\\(\\B\\|\\W\\|\\_>\\|[[:punct:]]\\)") target)
             collect token))
#+END_SRC

Ok, this seems to match for "face", "helm", and "selection" and "base" but not "blah".

Okay, this seems to work:

#+BEGIN_SRC elisp
(defcustom helm-org-rifle-re-begin-part
  "\\(\\B\\|\\W\\|\\_<\\|[[:punct:]]\\)"
  "Argh"
  :group 'helm-org-rifle :type 'regexp)

(defcustom helm-org-rifle-re-end-part
  "\\(\\B\\|\\W\\|\\_>\\|[[:punct:]]\\)"
  "argh"
  :group 'helm-org-rifle :type 'regexp)

;; Then do:
(concat helm-org-rifle-re-begin-part token helm-org-rifle-re-end-part)
#+END_SRC

But it feels like it's matching slower now, so I guess I need to experiment with different ones...

#+NAME: symtest
#+BEGIN_SRC elisp :exports code
  (let ((target "(face-remap-set-base 'helm-selection")
        (tokens '("face" "helm" "blah" "selection" "base")))
    (cl-loop for token in tokens
             when (string-match (concat helm-org-rifle-re-begin-part token helm-org-rifle-re-end-part) target)
             collect token))
#+END_SRC

Let's try a simpler one:

#+BEGIN_SRC elisp :results none
(setq helm-org-rifle-re-begin-part
  "\\(\\B\\|\\_<\\|[[:punct:]]\\)")

(setq helm-org-rifle-re-end-part
  "\\(\\B\\|\\_>\\|[[:punct:]]\\)")
#+END_SRC

#+CALL: symtest[]()

#+RESULTS:
| face | helm | selection | base |

Ok, that works.  Now for another:

#+BEGIN_SRC elisp :results none
(setq helm-org-rifle-re-begin-part
  "\\(\\_<\\|[[:punct:]]\\)")

(setq helm-org-rifle-re-end-part
  "\\(\\_>\\|[[:punct:]]\\)")
#+END_SRC

#+CALL: symtest[]()

#+RESULTS:
| face | helm | selection | base |

Ok, that seems to work too.  Kind of makes sense: symbol boundaries or punctuation (which apparently doesn't count as a symbol-boundary...for some values of syntax table...)

Ok, this seems to work and seems to be decently fast.  Let's commit it and try it out for a while.

*** Target heading

Searching for just the first word should find this, but it doesn't; only searching for =face-remap-set-base= does.

#+BEGIN_SRC elisp
  :after-init-hook (lambda ()
                     (with-current-buffer helm-buffer
                       (face-remap-set-base 'helm-selection
                                            :underline 'unspecified
                                            :weight 'unspecified
                                            :background (face-attribute 'helm-selection :background))))
#+END_SRC

** TODO Substring matching

Does searching for "solution" match this subheading?

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "solution")
#+END_SRC

...No, it does not.  That will probably need to be an option, customizable and/or with a prefix arg.

*** Test entry

Solutions

*** TODO [#A] Weird heading-only, second-word substring matching

[[https://www.reddit.com/r/emacs/comments/4c4fpo/helmorgrifle_rifle_through_your_org_files/d1hdoop][From /u/washy9999]]:

#+BEGIN_QUOTE
incidentally, on the matter of searching for substrings... if i enter a single word to search for i get a results list. if i then start entering a second word helm filters the results for each character that i enter. so, i get substring searches for words after the first! (this is for headings...it gets more complicated if i do searches that return topic content.)
#+END_QUOTE

Hm, this is strange.  I'll have to check on it.

** DONE Order-sensitive matching

We want order to be irrelevant.  So searching for "bravo alpha" should match the following subheading...

And it does.  Except...

#+BEGIN_SRC elisp
;; This works
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/inbox.org") "emacs org-mode")

;; This works
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/inbox.org") "org-mode emac")

;; This gives a weird args-out-of-range error.  Does it only happen in this large file?
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/inbox.org") "org-mode emacs")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/reference.org") "org-mode emacs")

;; No, it happens in the smaller file too...are hyphens the problem?...yes...
#+END_SRC



*** Test entry

alpha bravo

** DONE Hyphenated words cause order-sensitive matching?

#+BEGIN_SRC elisp
;; This works fine
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "alpha charlie-delta")

;; So does this
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "charlie-delta")

;; And this
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "charlie-delta alpha")

;; But this does not!
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "org-mode alpha")

;; But this works!
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "org-mode blah")
#+END_SRC

The problem seems to be when the hyphenated word is on a different line than the non-hyphenated word (and we're only dealing with two words here...).  I sure don't know why.  Will have to step through the matching code...

*** ivy-regex-ignore-order

The =ivy-regex-ignore-order= setting in [[http://oremacs.com/swiper/#completion-styles][ivy/swiper]] might help with figuring this out.

*** Test entry

alpha bravo charlie-delta
argh org-mode blah

** DONE Priority

Headings with priorities should be correctly displayed in results.

*** [#B] Priority target heading

Baby elephant

** MAYBE Match only headings

It might be nice to only match against headings, but this is not as easy as it might seem.  This whole package is made to search both headings and content.

** DONE Match and show tags
CLOSED: [2016-03-28 Mon 19:34]
:LOGBOOK:
- State "DONE"       from "UNDERWAY"   [2016-03-28 Mon 19:34]
- State "UNDERWAY"   from "DONE"       [2016-03-28 Mon 19:31]
- State "DONE"       from "TODO"       [2016-03-28 Mon 17:30]
:END:

This should show both this heading and the target:

#+BEGIN_SRC elisp :results value
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) "charade"))
#+END_SRC

#+RESULTS:
| *** Target heading for tags test :charade:                                                            | 34684 |
| ** TODO Match and show tags buffer (current-buffer) "charade"))...buffer (current-buffer) "charade")) | 34242 |

This should show only this heading:

#+BEGIN_SRC elisp :results value
  (let ((helm-org-rifle-show-tags nil))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) "charade"))
#+END_SRC

#+RESULTS:
| ** TODO Match and show tags buffer (current-buffer) "charade"))...t heading for tags test :charade: ...buffer (current-buffer) "charade"))...buffer (current-buf...buffer (current-buffer) "charade")) | 34242 |

*** Target heading for tags test :charade: 

Yarr.

*** Target heading 2

This should also match for the content: :charade: 

*** Fontify tags correctly

Tags are being fontified just like the rest of the heading text, instead of like tags.

#+BEGIN_SRC elisp
  (helm-org-rifle-fontify-like-in-org-mode (s-join " " (list "*"
                                                             "Heading"
                                                             ":tag1:tag2:")))
#+END_SRC

#+RESULTS:
:  * Heading :tag1:tag2:

Seems like there needs to be whitespace after the tag string to make it appear in the =org-tag= face.

#+BEGIN_SRC elisp
  (helm-org-rifle-fontify-like-in-org-mode (s-join " " (list "*"
                                                             "Heading"
                                                             ":tag1:tag2: ")))
#+END_SRC

#+RESULTS:
: * Heading :tag1:tag2:

*** Match with colons

Surrounding tags with colons in the input doesn't seem to work:

#+BEGIN_SRC elisp :results value
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) ":charade:"))
#+END_SRC

#+RESULTS:

It's because the colons in the tag string are being matched by the =:punct:= in the regexp's first part, eating the colon so it doesn't match the one in the input string.  I'm not sure how to fix that.  I guess I could make the matching regexp a series of =prefix-input-suffix= groups, and adjust the prefix and suffix for inputs that should match tags...seems messy but I guess it would work.

#+BEGIN_SRC txt
\(\_<\|[[:punct:]]\)\( \)\(\_>\|[[:punct:]]\)

"(_<|[[:punct:]])(:tag1:)(_>|[[:punct:]])"
#+END_SRC

#+BEGIN_SRC elisp
(string-match "^:[[:word:]@:]+:$" ":charade:tag2:")
(string-match "a" "ba")
#+END_SRC

#+BEGIN_SRC elisp
  (let* ((input (split-string input " " t))
         ;; Double colons in tag strings in input so they can match
         (input (mapcar (lambda (s)
                          (if (string-match helm-org-rifle-tags-re s)
                              (replace-regexp-in-string ":" "::" s)
                            s))
                        input))
         (match-all-tokens-re (mapconcat (lambda (token)
                                           (if (string-match helm-org-rifle-tags-re token)
                                               ;; Remove punct class from prefix and suffix so it can match tag strings
                                               (concat "\\_<" (regexp-quote token) "\\_>")
                                             ;; Not a tag; use normal prefix/suffix
                                             (concat helm-org-rifle-re-begin-part
                                                     (regexp-quote token)
                                                     helm-org-rifle-re-end-part)))))
         ;; TODO: Turn off case folding if input contains mixed case
         (case-fold-search t)
         results))
#+END_SRC

*** Match headings with multiple tags

Now it matches headings with one tag, but not more than one.

#+BEGIN_SRC elisp :results value
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) ":gunn:"))
#+END_SRC

Maybe this will help, from =org.el=

#+BEGIN_SRC elisp
(org-re "\\(?:[ \t]+\\(:[[:alnum:]_@#%%:]+:\\)\\)?")
#+END_SRC

#+BEGIN_SRC elisp
  (let ((helm-org-rifle-show-tags t)
        (helm-org-rifle-tags-re (org-re "\\(?:[ \t]+\\(:[[:alnum:]_@#%%:]+:\\)\\)?")))
    (helm-org-rifle-get-candidates-in-buffer (current-buffer) ":gunn:"))  
#+END_SRC

#+RESULTS:
| ****   Target heading with multiple tags :gunn:moon: \n                                                            | 38717 |
| ***   Match headings with multiple tags  \nbuffer (current-buffer) ":gunn:"))...buffer (current-buffer) ":gunn:")) | 38106 |

Yeah, using that regexp from =org-complex-heading-regexp-format= in =org.el= seems to work.  Whew.

But this is the more correct one I think:

[[file:~/tmp/src/org-mode/lisp/org.el::(let%20((tag-re%20(concat%20org-outline-regexp-bol][re in org.el]]:

#+BEGIN_SRC elisp
  (let ((tag-re (concat org-outline-regexp-bol
                        "\\(?:.*?[ \t]\\)?"
                        (org-re ":\\([[:alnum:]_@#%:]+\\):[ \t]*$")))
        (targets (list ":yes:" "no")))
    (mapcar (it (when (string-match tag-re it)
                  (match-string 0 it))) targets))
#+END_SRC

#+RESULTS:
| :yes: | nil |

And this more minimal one seems to work too:

#+BEGIN_SRC elisp
  (let ((tag-re (org-re ":\\([[:alnum:]_@#%:]+\\):[ \t]*$"))
        (targets (list ":yes:" "location" ":tag:" "notatag")))
    (mapcar (it (when (string-match tag-re it)
                  (match-string 0 it))) targets))
#+END_SRC

#+RESULTS:
| :yes: | nil | :tag: | nil |

#+BEGIN_SRC elisp
  (let ((tag-re helm-org-rifle-tags-re)
        (targets (list ":yes:" "location" ":tag:" "notatag")))
    (mapcar (it (when (string-match tag-re it)
                  (match-string 0 it))) targets))
#+END_SRC

#+RESULTS:
| :yes: | nil | :tag: | nil |

**** Target heading with multiple tags :gunn:moon: 

** DONE Negation
CLOSED: [2016-03-28 Mon 20:49]
:LOGBOOK:
- State "DONE"       from "UNDERWAY"   [2016-03-28 Mon 20:49]
- State "UNDERWAY"   from "DONE"       [2016-03-28 Mon 18:57]
- State "DONE"       from "UNDERWAY"   [2016-03-28 Mon 18:03]
- State "UNDERWAY"   from ""           [2016-03-28 Mon 17:30]
:END:

Emacs regexps don't support negation or lookahead, so we'll have to do it in stages.

1. Find negation patterns and move them to a separate list.
2. Test each match against negations and remove any that match.

*** Find negation patterns

#+BEGIN_SRC elisp
(mapcar (it (helm-org-rifle-prep-token it)) '("notatag" ":tag:"))

#+END_SRC

#+RESULTS:
| \(\(?:[ \n]+\(:[[:alnum:]_@#%%:]+:\)\)?\ | \)notatag\(\(?:[ \n]+\(:[[:alnum:]_@#%%:]+:\)\)?\ | \ | $\) | \(\(?:[ \n]+\(:[[:alnum:]_@#%%:]+:\)\)?\ | \):tag:\(\(?:[ \n]+\(:[[:alnum:]_@#%%:]+:\)\)?\ | \ | $\) |

#+BEGIN_SRC elisp
  (mapit '("notatag" ":tag:") (string-match helm-org-rifle-tags-re it))
#+END_SRC

#+RESULTS:
| 0 | 0 |

#+BEGIN_SRC elisp
  (let ((helm-org-rifle-tags-re (org-re ":\\([[:alnum:]_@#%:]+\\):[ \t]*$")))
    (mapit '("notatag" ":tag:") (string-match helm-org-rifle-tags-re it)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC elisp :results list
  (let* ((input (split-string "summertime !difficult easy" " " t))
         (negations (delq nil (mapcar (lambda (token)
                                        (when (string-match "^!" token)
                                          (setq input (remove token input))
                                          (helm-org-rifle-prep-token (s-chop-prefix "!" token))))
                                      input))))
    (list input negations))
#+END_SRC

#+RESULTS:
- ("summertime" "easy")
- ("\\(\\_<\\|[[:punct:]]\\)difficult\\(\\_>\\|[[:punct:]]\\)")

*** Test negation

#+BEGIN_SRC elisp
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) "target !winter"))
#+END_SRC

*** Target positive: summertime easy


*** Target negative: summertime difficult

*** Avoid partial negation

e.g. searching for =location !cat= should not exclude results containing =location=.

This should return the =Target positive: location= heading:

#+BEGIN_SRC elisp :results list
  (let ((helm-org-rifle-show-tags t))
    (mapit (helm-org-rifle-get-candidates-in-buffer (current-buffer) "location !ca ")
           (s-replace "\n" "" (s-collapse-whitespace (org-no-properties (car it))))))
#+END_SRC

#+RESULTS:
- **** Target positive: location 
- *** Match headings with multiple tags (targets (list ":yes:" "location" ":tag:" "notatag")))

This should not return that heading:

#+BEGIN_SRC elisp :results list
  (let ((helm-org-rifle-show-tags t))
    (mapit (helm-org-rifle-get-candidates-in-buffer (current-buffer) "location !cat ")
           (s-replace "\n" "" (s-collapse-whitespace (org-no-properties (car it))))))
#+END_SRC

#+RESULTS:
- **** Target positive: location 
- *** Match headings with multiple tags (targets (list ":yes:" "location" ":tag:" "notatag")))

#+BEGIN_SRC elisp
  (let ((pat "\\bcat\\b")
        (targets '("a cat sleeps" "a catastrophe" "what")))
    (mapit targets (when (string-match pat it)(match-string 0 it))))
#+END_SRC

#+RESULTS:
| cat | nil | nil |

...sigh.  Use =s-matches= not =s-contains=.  Duh.

#+BEGIN_SRC elisp
  (let ((pat "\\(\\_<\\|[[:punct:]]\\)cat\\(\\_>\\|[[:punct:]]\\)")
        (target "a cat sleeps"))
    (s-matches? pat target))
#+END_SRC

#+RESULTS:
: t

**** Conclusion

[2016-03-28 Mon 20:38] Well, I think it's working correctly now, but I'm not 100% sure.  Time will tell.  If it's not, hopefully I'll discover it or get some reports.

**** Target positive: location

notacatbutadog

**** Target negative: cat

**** Target negative 2

cat

*** Profile with/without negation

**** Without negation

#+BEGIN_SRC elisp :results value
  (profile-rifle 10 (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "emacs helm"))
#+END_SRC

#+RESULTS:
#+begin_example txt
helm-org-rifle-get-candidates-in-buffer                       10          2.707185944   0.2707185944
org-heading-components                                        1670        0.4622022819  0.0002767678
s-contains?                                                   6800        0.2288276119  3.365...e-05
buffer-substring-no-properties                                5270        0.1843129670  3.497...e-05
goto-char                                                     6660        0.1839791669  2.762...e-05
org-back-to-heading                                           1670        0.1826040410  0.0001093437
outline-back-to-heading                                       1670        0.1771684809  0.0001060889
search-forward-regexp                                         3320        0.160160969   4.824...e-05
outline-next-heading                                          1670        0.1304057709  7.808...e-05
outline-previous-heading                                      1670        0.0787214109  4.713...e-05
line-beginning-position                                       3510        0.0644287379  1.835...e-05
line-end-position                                             1660        0.0570988770  3.439...e-05
helm-org-rifle-prep-token                                     3340        0.0269152300  8.058...e-06
helm-org-rifle-fontify-like-in-org-mode                       40          0.0229983300  0.0005749582
string-match                                                  10300       0.0133238849  1.293...e-06
org-at-heading-p                                              1660        0.0131253569  7.906...e-06
outline-on-heading-p                                          3330        0.0113802549  3.417...e-06
map                                                           1690        0.0078921430  4.669...e-06
s-join                                                        1790        0.0078085580  4.362...e-06
mapcar                                                        1738        0.0055163129  3.173...e-06
#+end_example



**** With negation

#+BEGIN_SRC elisp :results value
  (profile-rifle 10 (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "emacs helm !mail"))
#+END_SRC

#+RESULTS:
#+begin_example txt
helm-org-rifle-get-candidates-in-buffer                       10          3.091637074   0.3091637074
org-heading-components                                        1670        0.4687531710  0.0002806905
buffer-substring-no-properties                                7070        0.2041990190  2.888...e-05
goto-char                                                     6800        0.1843262129  2.710...e-05
map                                                           1680        0.1841657830  0.0001096224
org-back-to-heading                                           1670        0.1832357559  0.0001097220
mapcar                                                        1728        0.1819894680  0.0001053179
car                                                           17102       0.1810326969  1.058...e-05
s-join                                                        1790        0.1791070739  0.0001000598
outline-back-to-heading                                       1670        0.1777289460  0.0001064245
mapconcat                                                     1820        0.1752004220  9.626...e-05
search-forward-regexp                                         3470        0.1643956769  4.737...e-05
outline-next-heading                                          1670        0.1309705520  7.842...e-05
line-beginning-position                                       5300        0.1271316750  2.398...e-05
line-end-position                                             3460        0.117448273   3.394...e-05
outline-previous-heading                                      1670        0.0792564969  4.745...e-05
s-contains?                                                   6740        0.0599737680  8.898...e-06
helm-org-rifle-prep-token                                     3490        0.0288021979  8.252...e-06
helm-org-rifle-fontify-like-in-org-mode                       40          0.0239840029  0.0005996000
string-match                                                  12220       0.0191793460  1.569...e-06
#+end_example

*** DONE Avoid clearing results when bare "!" is entered

It seems awkward that all of the results disappear when a bare =!= is entered.  Even if you type quickly, they all disappear and then reappear.  Should be possible to fix this...

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "emacs helm !")
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "emacs helm !org")
#+END_SRC

Fixed.  Thanks to [[https://www.reddit.com/user/washy99999][/u/washy9999]] for the feedback!

** MAYBE Testing with [[https://github.com/jorgenschaefer/emacs-buttercup][Buttercup]]

Could be good for testing e.g. negation, to make sure I don't break it.

** TODO More idiomatic Helm usage

#+BEGIN_SRC elisp
  (let ((helm-candidate-separator " "))
    (helm :sources (helm-build-in-file-source "test" "~/src/helm-org-rifle/test.org"
                                              :search 'org-entry-re-search-forward
                                              :get-line 'helm-org-rifle-get-entry
                                              :init (lambda () (when (org-before-first-heading-p)
                                                                 (outline-next-heading)))
                                              :filtered-candidate-transformer 'helm-org-rifle-filtered-candidate-transformer
                                              :match 'identity
                                              :requires-pattern t
                                              ;; Setting :delayed to a number causes
                                              ;; strange behavior, duplicated results,
                                              ;; causes the :candidates function to be
                                              ;; called nearly once for every character
                                              ;; entered, even though it is delayed for
                                              ;; right amount of time.  But setting it to
                                              ;; t works fine, and...fast...
                                              :multiline t
                                              :volatile t
                                              :action (helm-make-actions
                                                       "Show entry" 'helm-org-rifle-show-entry
                                                       "Show entry in indirect buffer" 'helm-org-rifle-show-entry-in-indirect-buffer
                                                       "Show entry in real buffer" 'helm-org-rifle-show-entry-in-real-buffer)
                                              :keymap helm-org-rifle-map)))
#+END_SRC

#+BEGIN_SRC elisp
  (helm-org-rifle-get-candidates-in-buffer (current-buffer) "john")
  (let ((helm-org-rifle-fontify-headings nil))
  (helm-org-rifle-get-candidates-in-buffer (current-buffer) "green"))
  (let ((helm-org-rifle-fontify-headings nil))
  (helm-org-rifle-get-candidates-in-buffer (current-buffer) "green"))
#+END_SRC

#+BEGIN_SRC elisp
    ;;;; Good stuff
  ;; I'll probably use these.
  
   
  (defun org-entry-re-search-forward (pattern &optional negation)
    "Move point to the beginning of the next entry that matches PATTERN but not NEGATION."
    (outline-next-heading)
    (cl-do (_)
        ((and (org-entry-matches-p pattern)
              (not (when negation
                     (org-entry-matches-p negation))))
         t)
      (unless (outline-next-heading)
        (return))))
  
 
  (defun org-get-entry-contents (&optional point)
    "Get contents (without heading) of entry (not subtrees) at POINT or current point."
    (when point (goto-char point))
    (forward-line)
    (buffer-substring-no-properties (point) (org-entry-end-position)))
    
  (defun org-get-matching-entries (pattern &optional negation)
    "Return list of contents of entries that match PATTERN but not NEGATION."
    (org-with-wide-buffer
     ;; (outline-next-heading) seems to get stuck, unable to go past
     ;; invisible (folded) headings, even though its docstring says
     ;; "move to the next (possibly invisible) heading."  So we have
     ;; to work around that by widening the buffer first.
     (goto-char (point-min))
     (when (org-before-first-heading-p)
       (outline-next-heading))
     ;; Surely there's a "real" macro or function to do this, but I
     ;; can't seem to find it.  -iterate runs a certain number of
     ;; times, and -unfold changes the seed on each iteration and
     ;; prepends instead of appends.
     (helm-org-rifle-accumulate 'org-get-next-matching-entry-pair pattern negation)))
  
    ;;;; Others
  ;; Not sure if I need these, but they might be useful.
  
  (defun org-entry-get-next-matching-entry-contents (pattern)
    "Return contents of next entry that matches PATTERN."
    (when (org-entry-re-search-forward pattern)
      (org-get-entry-contents)))
  
  (defun org-entry-get-next-matching-entry-point (pattern)
    "Return starting point of next entry that matches PATTERN."
    (when (org-entry-re-search-forward pattern)
      (org-entry-beginning-position)))
  
#+END_SRC

#+RESULTS:
: org-entry-get-next-matching-entry-point

More stuff:

#+BEGIN_SRC elisp
(defmacro --when-let (func &body)
  (let (it)
    (setq it (funcall ,func))
    (when it
      ,@body)))

(--when-let "yes"
  (message it))

(defmacro* let-while ((var expression) &rest body)
  ;; https://github.com/magnars/dash.el/issues/32
  (let ((expression-fn (make-symbol "expression-fn")))
    `(let ((,expression-fn (lambda () ,expression)))
       (while (let ((,var (funcall ,expression-fn)))
                ,@body
                ,var)))))

(let-while (res (float-time))
           (sleep-for 1)
           (message "%s" res))

(defun helm-org-rifle-filtered-candidate-transformer (candidates &rest source)
  (when candidates
    (cl-loop with end
             with tokens = (s-split-words helm-pattern)
             with regexps = (cl-loop for token in tokens
                                     collect (rx-to-string `(and (repeat 0 ,helm-org-rifle-context-characters not-newline)
                                                                 (eval token)
                                                                 (repeat 0 ,helm-org-rifle-context-characters not-newline))))
             for candidate in candidates
             for contents = (car candidate)
             for pos = (cdr candidate)
             for end = nil
             do (message "CANDIDATE: %s" candidate)
             and collect (cons (cl-loop
                                for re in regexps
                                for match = (string-match re contents end)
                                if match
                                do (setq end (match-end 0))
                                and collect (match-string 0 contents) into strings
                                else do (setq end nil)
                                finally return (s-join "..." strings))
                               pos))))

(defun helm-org-rifle-filtered-candidate-transformer (candidate c)
  (message "%s %s" candidate c))
(let ((helm-pattern "blah blah blah"))
  (helm-org-rifle-filtered-candidate-transformer "okay blah okay" 12))

(defun helm-org-rifle-filtered-candidate-transformer (contents pos)
  (let* ((matching-strings (cl-loop with end
                                    for token in (s-split-words helm-pattern)
                                    for re = (rx-to-string `(and (repeat 0 ,helm-org-rifle-context-characters not-newline)
                                                                 (eval token)
                                                                 (repeat 0 ,helm-org-rifle-context-characters not-newline)))
                                    for match = (string-match re contents end)
                                    if match
                                    do (setq end (match-end 0))
                                    and collect match
                                    else do (setq end nil))))
    (cons (s-join "..." matching-strings) pos)))

#+END_SRC

These macros might be useful:

#+BEGIN_SRC elisp
(defmacro --when-let (func &body)
  (let (it)
    (setq it (funcall ,func))
    (when it
      ,@body)))

(--when-let "yes"
  (message it))

(defmacro* let-while ((var expression) &rest body)
  ;; https://github.com/magnars/dash.el/issues/32
  (let ((expression-fn (make-symbol "expression-fn")))
    `(let ((,expression-fn (lambda () ,expression)))
       (while (let ((,var (funcall ,expression-fn)))
                ,@body
                ,var)))))

(let-while (res (float-time))
           (sleep-for 1)
           (message "%s" res))

#+END_SRC

Thought maybe I could transform =helm-mm-3-search-base= but...eh...

#+BEGIN_SRC elisp
(defun org-helm-mm-3-search-base (pattern searchfn1 searchfn2)
  "Try to find PATTERN in `helm-buffer' with SEARCHFN1 and SEARCHFN2.
This is the search function for `candidates-in-buffer' enabled sources.
Use the same method as `helm-mm-3-match' except it search in buffer
instead of matching on a string.
i.e (identity (re-search-forward \"foo\" (point-at-eol) t)) => t."
  (cl-loop with pat = (if (stringp pattern)
                          (helm-mm-3-get-patterns pattern)
                          pattern)
           when (eq (caar pat) 'not) return
           ;; Pass the job to `helm-search-match-part'.
           (prog1 (list (org-entry-beginning-position) (org-entry-end-position))
             (outline-next-heading))
           while (condition-case _err
                     (funcall searchfn1 (or (cdar pat) "") nil t)
                   (invalid-regexp nil))
           for bol = (org-entry-beginning-position)
           for eol = (org-entry-end-position)
           if (cl-loop for (pred . str) in (cdr pat) always
                       (progn (goto-char bol)
                              (funcall pred (condition-case _err
                                                (funcall searchfn2 str eol t)
                                              (invalid-regexp nil)))))
           do (goto-char eol) and return t
           else do (goto-char eol)
           finally return nil))
#+END_SRC

*** Profiling new code

This /seems/ faster, but let's find out...

**** One

#+NAME: doit
#+BEGIN_SRC elisp :results value txt
  ;;(profile-rifle 1 (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "emacs helm"))
;;  (profile-rifle 10 (helm-org-rifle-get-candidates-in-buffer (current-buffer) "match"))
;;(profile-rifle 50 (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/main.org") "org-mode dennis"))
;;(profile-rifle 50 (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/main.org") "dennis !prager"))
(profile-rifle 50 (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/main.org") "emacs"))
(length (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/main.org") "emacs"))
#+END_SRC

Last-gen:

#+CALL: doit[]()

#+RESULTS:
#+begin_example txt
helm-org-rifle-get-candidates-in-buffer                       50          19.011357953  0.3802271590
helm-org-rifle-fontify-like-in-org-mode                       7300        7.9353001029  0.0010870274
mapconcat                                                     31300       1.9679323559  6.287...e-05
s-join                                                        29200       1.9022801840  6.514...e-05
rx-form                                                       14350       1.8291191529  0.0001274647
org-heading-components                                        7300        1.0824104040  0.0001482753
rx-to-string                                                  2050        0.7985258100  0.0003895247
rx-and                                                        2050        0.7717930009  0.0003764843
rx-eval                                                       2050        0.6182544019  0.0003015875
s-contains?                                                   19550       0.4645642879  2.376...e-05
org-back-to-heading                                           7300        0.4069470569  5.574...e-05
org-activate-tags                                             7300        0.4003263999  5.483...e-05
org-do-latex-and-related                                      7300        0.3874584990  5.307...e-05
outline-back-to-heading                                       7300        0.3834820760  5.253...e-05
org-string-nw-p                                               7300        0.3667658949  5.024...e-05
org-activate-bracket-links                                    8300        0.3612529069  4.352...e-05
goto-char                                                     21950       0.3611447349  1.645...e-05
org-do-emphasis-faces                                         7350        0.3546604489  4.825...e-05
org-bullets-level-char                                        7300        0.3421948010  4.687...e-05
org-remove-flyspell-overlays-in                               7300        0.3199097880  4.382...e-05
#+end_example

Next-gen:

#+CALL: doit[]()

#+RESULTS:
#+begin_example txt
helm-org-rifle-get-candidates-in-buffer                       50          17.04595047   0.3409190094
helm-org-rifle-get-matching-entries                           50          17.035312574  0.3407062514
helm-org-rifle-get-next-matching-entry                        7600        17.004119313  0.0022373841
helm-org-rifle-get-current-entry                              7550        13.389090679  0.0017733894
helm-org-rifle-fontify-like-in-org-mode                       7550        8.0418071589  0.0010651400
helm-org-rifle-re-search-forward-entry                        7600        3.2794722909  0.0004315095
helm-org-rifle-entry-matches-p                                11650       1.8098314410  0.0001553503
outline-next-heading                                          30950       1.4429479359  4.662...e-05
org-heading-components                                        7550        1.3602055470  0.0001801596
org-entry-end-position                                        19200       1.2508853759  6.515...e-05
outline-back-to-heading                                       19200       1.2315694519  6.414...e-05
org-activate-plain-links                                      9700        0.7611544300  7.846...e-05
org-back-to-heading                                           7550        0.6782356830  8.983...e-05
org-entry-beginning-position                                  11650       0.6619639149  5.682...e-05
org-activate-bracket-links                                    8550        0.6567128219  7.680...e-05
org-activate-tags                                             7550        0.4027403180  5.334...e-05
org-activate-footnote-links                                   7550        0.3871381280  5.127...e-05
outline-on-heading-p                                          19700       0.3638262780  1.846...e-05
org-footnote-next-reference-or-definition                     7550        0.3622300070  4.797...e-05
org-do-emphasis-faces                                         7600        0.3575519480  4.704...e-05
#+end_example

**** Difference in results?

#+NAME: sort-results
#+BEGIN_SRC elisp :results value list
  (let ((results (sort (mapcar (lambda (c)
                                 (s-replace "\n" "" (s-truncate 50 (substring-no-properties (car c)))))
                               (helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/main.org") "emacs"))
                       'string-lessp)
                 ))
    (append (list (length results)) results))
#+END_SRC

New-gen:

#+RESULTS: sort-results
- 151
- ***   Emacs :Emacs: 
- *** DONE [#C] Set up org-habits :Emacs:org: 
- ****   Firefox JSON bookmark dump deduplicator ...
- ****   Methodology  
- ****   New methodology  
- ****   elp results without delete-dups  
- **** SOMEDAY  Emacs vc bug :bugs: 
- **** SOMEDAY  Make menu key act like win key :E...
- **** TODO  KeySnail Firefox extension (like Ema...
- *****   Bug about helm and completing org tags  
- *****   Comment line function :Emacs: 
- *****   Elfeed RSS reader for Emacs :Emacs: 
- *****   Emacs and Super key  
- *****   Get icicles/anything/ido/icomplete/what...
- *****   Good bindings and other goodies: http:/...
- *****   Package init stuff for .emacs :Emacs: 
- *****   Package: =volatile-highlights=  
- *****   Simple menu :Emacs: 
- *****   Smart home key  
- *****   Switch-frame auto-save  
- *****   Try emacs launcher-map :Emacs: 
- *****   Two new libraries (`poporg.el' by Franç...
- *****   Visit a directory inside a set of direc...
- *****   Winner-mode :Emacs: 
- *****   [[http://batsov.com/prelude/][Prelude]]...
- *****   [[http://beatofthegeek.com/2014/02/my-s...
- *****   [[http://emacs-template.sourceforge.net...
- *****   [[http://ergoemacs.org/emacs/emacs_look...
- *****   [[http://www.emacswiki.org/emacs/UndoTr...
- *****   [[http://www.masteringemacs.org/article...
- *****   avy :Emacs: 
- *****   better-jump :Emacs: 
- *****   copy/cut current line/region function :...
- *****   el-get :Emacs: 
- *****   firestarter :Emacs: 
- *****   function to remind me to clock in to so...
- *****   gmail-message-mode :Emacs: 
- *****   hideshow-org :Emacs: 
- *****   http://emacs.stackexchange.com/question...
- *****   http://endlessparentheses.com/tab-compl...
- *****   http://sachachua.com/blog/2015/02/learn...
- *****   http://stackoverflow.com/questions/1795...
- *****   http://superuser.com/questions/643618/e...
- *****   http://www.emacswiki.org/emacs-es/Bookm...
- *****   http://www.emacswiki.org/emacs/MiniMap  
- *****   http://www.emacswiki.org/emacs/WThreeMT...
- *****   https://github.com/DamienCassou/shell-s...
- *****   https://github.com/angelic-sedition/ema...
- *****   https://github.com/jonathanchu/emacs-po...
- *****   https://github.com/jwiegley/use-package...
- *****   navigate                        Seamles...
- *****   org-notify  
- *****   pallet :Emacs: 
- *****   recursive-narrow :Emacs: 
- *****   theme-looper :Emacs: 
- *****   use-package :Emacs: 
- *****   v8.x  
- *****  [#C] Email in Emacs  
- ***** CANCELED [#C] Rebind icicle key :Emacs:org: 
- ***** SOMEDAY  Cleanup buffers from persistent ...
- ***** SOMEDAY  Get stuff from Sacha Chua's date...
- ***** SOMEDAY  Setup [[https://julien.danjou.in...
- ***** SOMEDAY  Show current org headline at top...
- ***** SOMEDAY  Update smart-mode-line :Emacs: 
- ***** SOMEDAY  Use org or outline-mode for init...
- ***** SOMEDAY  [[https://github.com/melpa/melpa...
- ***** SOMEDAY  helm-fuzzier  
- ***** STARTED  Look into binding F8 to toggle c...
- ***** TODO  Better backspace during isearch :Em...
- ***** TODO  Emacs function to refile an item to...
- ***** TODO  Get stuff from Sacha Chua's .emacs ...
- ***** TODO  Make Emacs auto-save org and auto-s...
- ***** TODO  Make capture template schedule the ...
- ***** TODO  Make emacs launch in org-agenda :or...
- ***** TODO  Merge features from color-theme-leu...
- ***** TODO  Modeline thingy to remind me to clo...
- ***** TODO  Read the Emacs Lisp intro :Emacs: 
- ***** TODO  Sacha on org and Evernote :org: 
- ***** TODO  Sacha's notetaking workflow :org: 
- ***** TODO  Try new org-velocity patch :org:Ema...
- ***** TODO  [[http://emacsredux.com/blog/2014/0...
- ***** TODO  [[http://irreal.org/blog/?p=4789][S...
- ***** TODO  [[http://sachachua.com/blog/2015/12...
- ***** TODO  better-defaults :Emacs: 
- ***** TODO  emacs function to remind to clock i...
- ***** TODO  helm-org improvements :Emacs:org: 
- ***** TODO [#B] Install Org 8.3 :Org:Emacs:@Com...
- ***** TODO [#B] auto-revert-mode  
- ***** TODO [#C] File org-mode bug about expandi...
- ***** TODO [#C] [[http://pragmaticemacs.com/ema...
- ******   .emacs files to look at  
- ******   Archiving subtrees with preserved hier...
- ******   Article  
- ******   Deft  
- ******   Drag images from Firefox to org :org: 
- ******   Emacs IPython notebook :Python: 
- ******   Emacs in insert-mode  
- ******   Emacs-jedi :Python: 
- ******   Fixes for problems in outshine/outorg ...
- ******   Fixup property drawers  
- ******   Flash-card Anki-like stuff  
- ******   Literate programming stuff  
- ******   Org and icicles: use C-SPC to restrict...
- ******   Org blogging with nikola :org:software: 
- ******   Using org like a database  
- ******   [[http://emacs-fu.blogspot.com/search/...
- ******   [[https://github.com/avendael/emacs-ge...
- ******   http://sachachua.com/blog/2013/01/emac...
- ******   http://sachachua.com/blog/2013/06/how-...
- ******   http://sachachua.com/blog/2015/03/gett...
- ******   http://thewanderingcoder.com/2015/03/a...
- ******   http://www.emacswiki.org/emacs/AutoCom...
- ******   http://www.emacswiki.org/emacs/Company...
- ******   org-agenda breadcrumbs patch :orgmode: 
- ******   org-page :Emacs:org: 
- ******   org-pomodoro rewrite by leoc :orgmode:...
- ******   worf  
- ****** DONE  Put in a dir and use git  
- ****** DONE [#C] Move TODO types into .emacs :o...
- ****** TODO  Day log indirect buffer command :E...
- ****** TODO  Help for speed keys  
- ****** TODO  Look into org-trello :Org: 
- ****** TODO  Org done strikethrough  
- ****** TODO  Org-mode Hydras  
- ****** TODO  Reading books with org :neat: 
- ****** TODO  Sacha Chua's .emacs  
- ****** TODO  Setup some kind of autosaving  
- ****** TODO  Setup sync  
- ****** TODO  Try org-crypt :org: 
- ****** TODO  [[http://www.emacswiki.org/emacs/F...
- ****** TODO  emacs-calfw calendar framework  
- ****** TODO  org writers room :org: 
- ****** TODO  org-capture for Firefox :Org: 
- ****** TODO  org-dotemacs :org: 
- ****** TODO  org-ehtml  
- ****** TODO  tabbarmode :Emacs:org: 
- ****** TODO [#A] org-mobile idle sync timer  
- ****** TODO [#B] Hotkey to clock-in/narrow-tree...
- ****** UNDERWAY  Add org-bookmark support to He...
- *******   [[/][Dennis Ogbe]]  
- *******   [[http://article.gmane.org/gmane.emac...
- *******   http://article.gmane.org/gmane.emacs....
- *******   http://emacsrookie.com/2011/10/17/cap...
- *******   http://leohacker.wordpress.com/2008/1...
- *******   http://www.emacswiki.org/emacs/Raymon...
- *******   http://www.windley.com/archives/2010/...
- *******   real-auto-save.el  
- ******* TODO  Figure out Dropbox sync  
- ******* UNDERWAY  [[http://fort.kickass.systems...
- ********   [[https://lists.gnu.org/archive/html...
- ******** MAYBE  Add to [[https://www.emacswiki....


Old-gen:

#+RESULTS:
- 146
- ***   Emacs :Emacs: 
- *** DONE [#C] Set up org-habits :Emacs:org: 
- ****   Firefox JSON bookmark dump deduplicator ...
- ****   Methodology  2. Start Emacs.
- ****   New methodology  2.  Start emacs.
- ****   elp results without delete-dups  de run...
- **** SOMEDAY  Emacs vc bug :bugs: 
- **** SOMEDAY  Make menu key act like win key :E...
- **** TODO  KeySnail Firefox extension (like Ema...
- *****   Bug about helm and completing org tags ...
- *****   Comment line function :Emacs: 
- *****   Elfeed RSS reader for Emacs :Emacs: 
- *****   Emacs and Super key  
- *****   Get icicles/anything/ido/icomplete/what...
- *****   Good bindings and other goodies: http:/...
- *****   Package init stuff for .emacs :Emacs: 
- *****   Package: =volatile-highlights=  Homepa...
- *****   Simple menu :Emacs: 
- *****   Smart home key  13/02/13/nuggets-from-...
- *****   Switch-frame auto-save  .com/articles/...
- *****   Try emacs launcher-map :Emacs: 
- *****   Two new libraries (`poporg.el' by Franç...
- *****   Visit a directory inside a set of direc...
- *****   Winner-mode :Emacs: 
- *****   [[http://batsov.com/prelude/][Prelude]]...
- *****   [[http://beatofthegeek.com/2014/02/my-s...
- *****   [[http://emacs-template.sourceforge.net...
- *****   [[http://ergoemacs.org/emacs/emacs_look...
- *****   [[http://www.emacswiki.org/emacs/UndoTr...
- *****   [[http://www.masteringemacs.org/article...
- *****   avy :Emacs: 
- *****   better-jump :Emacs: 
- *****   copy/cut current line/region function :...
- *****   el-get :Emacs: 
- *****   firestarter :Emacs: 
- *****   function to remind me to clock in to so...
- *****   gmail-message-mode :Emacs: 
- *****   hideshow-org :Emacs: 
- *****   http://emacs.stackexchange.com/question...
- *****   http://endlessparentheses.com/tab-compl...
- *****   http://sachachua.com/blog/2015/02/learn...
- *****   http://stackoverflow.com/questions/1795...
- *****   http://superuser.com/questions/643618/e...
- *****   http://www.emacswiki.org/emacs-es/Bookm...
- *****   http://www.emacswiki.org/emacs/MiniMap  
- *****   http://www.emacswiki.org/emacs/WThreeMT...
- *****   https://github.com/DamienCassou/shell-s...
- *****   https://github.com/angelic-sedition/ema...
- *****   https://github.com/jonathanchu/emacs-po...
- *****   https://github.com/jwiegley/use-package...
- *****   navigate                        Seamles...
- *****   org-notify  /article.gmane.org/gmane.e...
- *****   pallet :Emacs: 
- *****   recursive-narrow :Emacs: 
- *****   theme-looper :Emacs: 
- *****   use-package :Emacs: 
- *****   v8.x  /article.gmane.org/gmane.emacs.o...
- *****  [#C] Email in Emacs  
- ***** CANCELED [#C] Rebind icicle key :Emacs:or...
- ***** SOMEDAY  Cleanup buffers from persistent ...
- ***** SOMEDAY  Get stuff from Sacha Chua's date...
- ***** SOMEDAY  Setup [[https://julien.danjou.in...
- ***** SOMEDAY  Show current org headline at top...
- ***** SOMEDAY  Update smart-mode-line :Emacs: 
- ***** SOMEDAY  Use org or outline-mode for init...
- ***** SOMEDAY  [[https://github.com/melpa/melpa...
- ***** SOMEDAY  helm-fuzzier  + [[https://githu...
- ***** STARTED  Look into binding F8 to toggle c...
- ***** TODO  Better backspace during isearch :Em...
- ***** TODO  Emacs function to refile an item to...
- ***** TODO  Get stuff from Sacha Chua's .emacs ...
- ***** TODO  Make Emacs auto-save org and auto-s...
- ***** TODO  Make capture template schedule the ...
- ***** TODO  Make emacs launch in org-agenda :or...
- ***** TODO  Merge features from color-theme-leu...
- ***** TODO  Modeline thingy to remind me to clo...
- ***** TODO  Read the Emacs Lisp intro :Emacs: 
- ***** TODO  Sacha on org and Evernote :org: og...
- ***** TODO  Sacha's notetaking workflow :org: ...
- ***** TODO  Try new org-velocity patch :org:Ema...
- ***** TODO  [[http://emacsredux.com/blog/2014/0...
- ***** TODO  [[http://irreal.org/blog/?p=4789][S...
- ***** TODO  [[http://sachachua.com/blog/2015/12...
- ***** TODO  better-defaults :Emacs: 
- ***** TODO  emacs function to remind to clock i...
- ***** TODO  helm-org improvements :Emacs:org: 
- ***** TODO [#B] Install Org 8.3 :Org:Emacs:@Com...
- ***** TODO [#B] auto-revert-mode  http://www.e...
- ***** TODO [#C] File org-mode bug about expandi...
- ***** TODO [#C] [[http://pragmaticemacs.com/ema...
- ******   .emacs files to look at  
- ******   Archiving subtrees with preserved hier...
- ******   Article  #+BEGIN_SRC emacs-lisp
- ******   Deft   http://www.reddit.com/r/emacs/...
- ******   Drag images from Firefox to org :org: ...
- ******   Emacs IPython notebook :Python: 
- ******   Emacs in insert-mode  
- ******   Emacs-jedi :Python: 
- ******   Fixes for problems in outshine/outorg ...
- ******   Fixup property drawers  #+begin_src e...
- ******   Flash-card Anki-like stuff  http://ww...
- ******   Literate programming stuff   http://w...
- ******   Org and icicles: use C-SPC to restrict...
- ******   Org blogging with nikola :org:software...
- ******   Using org like a database  et/linuxis...
- ******   [[http://emacs-fu.blogspot.com/search/...
- ******   [[https://github.com/avendael/emacs-ge...
- ******   http://sachachua.com/blog/2013/01/emac...
- ******   http://sachachua.com/blog/2013/06/how-...
- ******   http://sachachua.com/blog/2015/03/gett...
- ******   http://thewanderingcoder.com/2015/03/a...
- ******   http://www.emacswiki.org/emacs/AutoCom...
- ******   http://www.emacswiki.org/emacs/Company...
- ******   org-agenda breadcrumbs patch :orgmode:...
- ******   org-page :Emacs:org: 
- ******   org-pomodoro rewrite by leoc :orgmode:...
- ****** DONE  Put in a dir and use git  how to ...
- ****** DONE [#C] Move TODO types into .emacs :o...
- ****** TODO  Day log indirect buffer command :E...
- ****** TODO  Help for speed keys  /article.gma...
- ****** TODO  Look into org-trello :Org: [http:...
- ****** TODO  Org done strikethrough  chachua.c...
- ****** TODO  Reading books with org :neat: /ar...
- ****** TODO  Sacha Chua's .emacs  
- ****** TODO  Setup some kind of autosaving  Li...
- ****** TODO  Setup sync  enmankoff.com/2012/08...
- ****** TODO  Try org-crypt :org:  Wed 13:53] [...
- ****** TODO  [[http://www.emacswiki.org/emacs/F...
- ****** TODO  emacs-calfw calendar framework  
- ****** TODO  org writers room :org: p://news.g...
- ****** TODO  org-capture for Firefox :Org: ld ...
- ****** TODO  org-ehtml  ox-ehtml using the Ema...
- ****** TODO  tabbarmode :Emacs:org: 
- ****** TODO [#A] org-mobile idle sync timer  p...
- ****** TODO [#B] Hotkey to clock-in/narrow-tree...
- ****** UNDERWAY  Add org-bookmark support to He...
- *******   [[/][Dennis Ogbe]]  2013-11-13-blogg...
- *******   [[http://article.gmane.org/gmane.emac...
- *******   http://article.gmane.org/gmane.emacs....
- *******   http://leohacker.wordpress.com/2008/1...
- *******   http://www.emacswiki.org/emacs/Raymon...
- *******   http://www.windley.com/archives/2010/...
- ******* TODO  Figure out Dropbox sync  If Emac...
- ******* UNDERWAY  [[http://fort.kickass.systems...
- ********   [[https://lists.gnu.org/archive/html...
- ******** MAYBE  Add to [[https://www.emacswiki....

**** Old-and-new

#+BEGIN_SRC elisp :results  list
  (profile-old-and-new
   5
   (let ((results (sort
                   (mapcar
                    (lambda (c)
                      (s-replace "\n" "" (s-truncate 50 (substring-no-properties (car c)))))
                    (helm-org-rifle-get-candidates-in-buffer (find-file-noselect "~/org/main.org") "emacs"))
                   'string-lessp)))
     (append (list (length results)) results)))
#+END_SRC

#+RESULTS:
- ~/src/helm-org-rifle/old-gen.el
helm-org-rifle-get-candidates-in-buffer                       5           2.0703465839  0.4140693167
helm-org-rifle-fontify-like-in-org-mode                       730         0.6958069519  0.0009531602
s-join                                                        2920        0.4037718939  0.0001382780
org-indent-refresh-maybe                                      1460        0.2326660929  0.0001593603
org-indent-add-properties                                     1460        0.1994599629  0.0001366164
mapconcat                                                     3130        0.1498939680  4.788...e-05
org-at-heading-p                                              2240        0.1412740189  6.306...e-05
outline-on-heading-p                                          4430        0.1389781489  3.137...e-05
org-heading-components                                        730         0.0949407450  0.0001300558
org-back-to-heading                                           2190        0.0586624490  2.678...e-05
outline-back-to-heading                                       2190        0.0542111910  2.475...e-05
goto-char                                                     2195        0.0465827929  2.122...e-05
outline-next-heading                                          2195        0.0420997990  1.917...e-05
rx-form                                                       1435        0.0369129029  2.572...e-05
mapcar                                                        1500        0.0315014220  2.100...e-05
search-forward-regexp                                         730         0.0287104579  3.932...e-05
rx-to-string                                                  205         0.0214925349  0.0001048416
org-get-limited-outline-regexp                                2920        0.0204441500  7.001...e-06
outline-previous-heading                                      730         0.0201211679  2.756...e-05
line-end-position                                             1460        0.0193188799  1.323...e-05

- ~/src/helm-org-rifle/helm-org-rifle.el
helm-org-rifle-get-candidates-in-buffer                       5           2.0470522079  0.4094104415
helm-org-rifle-get-matching-entries                           5           2.045984757   0.4091969513
helm-org-rifle-get-next-matching-entry                        760         2.0415580780  0.0026862606
helm-org-rifle-get-current-entry                              755         1.6984487939  0.0022496010
helm-org-rifle-fontify-like-in-org-mode                       755         1.2336561669  0.0016339816
org-indent-refresh-maybe                                      1510        0.3698710990  0.0002449477
helm-org-rifle-re-search-forward-entry                        760         0.3386924809  0.0004456480
outline-next-heading                                          4605        0.3243633689  7.043...e-05
org-heading-components                                        755         0.2247750449  0.0002977152
org-indent-add-properties                                     1510        0.2036479299  0.0001348661
helm-org-rifle-entry-matches-p                                1165        0.2011469629  0.0001726583
org-entry-end-position                                        1920        0.1685432710  8.778...e-05
org-do-emphasis-faces                                         760         0.1344446049  0.0001769007
org-fontify-entities                                          755         0.1289251480  0.0001707617
outline-back-to-heading                                       3430        0.0939109000  2.737...e-05
org-back-to-heading                                           2265        0.0601030919  2.653...e-05
org-entry-beginning-position                                  1165        0.0493531050  4.236...e-05
mapcar                                                        35          0.0272609669  0.0007788847
org-indent-notify-modified-headline                           1510        0.0234859020  1.555...e-05
org-get-limited-outline-regexp                                3020        0.0206098460  6.824...e-06




* Test heading top-level

This file is for testing helm-org-rifle.

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates "pomegr blueberry")
(helm-org-rifle-get-candidates "top-level")
#+END_SRC

** Heading A: blueberry

Keywords: pomegranate boisenberry

** Heading B: pomegranate boisenberry

** Heading C: pomegranate

** Heading D: boisenberry

** Heading E

pomegranate

** Heading F green

boisenberry

** Heading G
red orange yellow green blue indigo violet
black black black black blue black black

*** Heading G.1

green beans and blueberry

** Heading H: Helm

What is it with all this food?

*** Heading H.1

Emacs

** Heading I: emacs

helm :)

** Heading J:

*** John 1
John

*** John 2
John
